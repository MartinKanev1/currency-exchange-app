document.addEventListener("DOMContentLoaded", async () => {
    // üìå –î–µ—Ñ–∏–Ω–∏—Ä–∞–Ω–µ –Ω–∞ –Ω–∞–ª–∏—á–Ω–∏ –≤–∞–ª—É—Ç–∏
    const currencies = ["USD", "EUR", "GBP", "BGN"]; 
    const fromCurrency = document.getElementById("fromCurrency");
    const toCurrency = document.getElementById("toCurrency");

    // üìå –ü–æ–ø—ä–ª–≤–∞–Ω–µ –Ω–∞ dropdown —Å–ø–∏—Å—ä—Ü–∏—Ç–µ —Å –≤–∞–ª—É—Ç–∏
    currencies.forEach(currency => {
        fromCurrency.innerHTML += `<option value="${currency}">${currency}</option>`;
        toCurrency.innerHTML += `<option value="${currency}">${currency}</option>`;
    });

    // üìå –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—è—Ç–∞ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏—Ç–µ
    //await loadHistory();
});

// üìå –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–ª—É—á–∞–≤–∞–Ω–µ –Ω–∞ –æ–±–º–µ–Ω–Ω–∏—è –∫—É—Ä—Å
async function getExchangeRate(fromCurrency, toCurrency) {
    try {
        const response = await fetch(`http://localhost:8080/api/exchange-rate?currentCurrency=${fromCurrency}&targetCurrency=${toCurrency}`);
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`–ì—Ä–µ—à–∫–∞: ${errorData.message || "–û–±–º–µ–Ω–Ω–∏—è—Ç –∫—É—Ä—Å –Ω–µ –º–æ–∂–µ –¥–∞ –±—ä–¥–µ –∏–∑–≤–ª–µ—á–µ–Ω."}`);
        }

        const data = await response.json();
        return data.rate; // –í—Ä—ä—â–∞ –æ–±–º–µ–Ω–Ω–∏—è –∫—É—Ä—Å
    } catch (error) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ –æ–±–º–µ–Ω–Ω–∏—è –∫—É—Ä—Å:", error);
        alert(error.message);
        return null;
    }
}

document.getElementById("convertBtn").addEventListener("click", async () => {
    const fromCurrency = document.getElementById("fromCurrency").value.trim().toUpperCase();
    const toCurrency = document.getElementById("toCurrency").value.trim().toUpperCase();
    const amount = parseFloat(document.getElementById("amount").value);

    if (!amount || amount <= 0 || !fromCurrency || !toCurrency) {
        alert("‚ùå –ú–æ–ª—è, –ø–æ–ø—ä–ª–Ω–µ—Ç–µ –≤—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞ —Å –≤–∞–ª–∏–¥–Ω–∏ –¥–∞–Ω–Ω–∏!");
        return;
    }

    const requestBody = {
        amount: amount,
        sourceCurrency: fromCurrency,
        targetCurrency: toCurrency
    };

    console.log("Request body being sent:", JSON.stringify(requestBody));

    try {
        const response = await fetch("http://localhost:8080/api/convert", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(requestBody)
        });

        console.log("Response status:", response.status);

        if (!response.ok) {
            const errorData = await response.json();
            console.error("Error response body:", errorData);
            throw new Error(errorData.message || "–ö–æ–Ω–≤–µ—Ä—Å–∏—è—Ç–∞ –Ω–µ –º–æ–∂–µ –¥–∞ –±—ä–¥–µ –∏–∑–≤—ä—Ä—à–µ–Ω–∞.");
        }

        const data = await response.json();
        console.log("Response data:", data);

        // –ü–æ–∫–∞–∑–≤–∞–º–µ —Å–∞–º–æ Converted Amount –∏ Transaction ID
        document.getElementById("result").innerText = `${data.convertedAmount} ${toCurrency}`;
        document.getElementById("transactionId").innerText = data.transactionId;
    } catch (error) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–∞–Ω–µ:", error);
        alert(error.message);
    }
});












// üìå –§—É–Ω–∫—Ü–∏—è –∑–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—è—Ç–∞ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏—Ç–µ
async function loadHistory() {
    try {
        const response = await fetch("http://localhost:8080/api/transactions/all");

        if (!response.ok) {
            throw new Error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—è—Ç–∞ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏—Ç–µ.");
        }

        const transactions = await response.json();
        const tableBody = document.querySelector("#historyTable tbody");
        tableBody.innerHTML = ""; // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –ø—Ä–µ–¥–∏ –Ω–æ–≤–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ

        transactions.forEach(tx => {
            tableBody.innerHTML += `
                <tr>
                    <td>${new Date(tx.date).toLocaleString()}</td>
                    <td>${tx.sourceCurrency}</td>
                    <td>${tx.targetCurrency}</td>
                    <td>${tx.amount}</td>
                    <td>${tx.convertedAmount}</td>
                    <td><button onclick="deleteTransaction(${tx.transactionId})">üóëÔ∏è</button></td>
                </tr>
            `;
        });
    } catch (error) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—è—Ç–∞:", error);
        alert("–ù–µ—É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—è—Ç–∞. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ –≤—Ä—ä–∑–∫–∞—Ç–∞ —Å API.");
    }
}

// üìå –§—É–Ω–∫—Ü–∏—è –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ ID
async function deleteTransaction(transactionId) {
    if (!confirm("‚ö†Ô∏è –°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑—Ç—Ä–∏–µ—Ç–µ —Ç–∞–∑–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è?")) return;

    try {
        const response = await fetch(`http://localhost:8080/api/transactions/${transactionId}`, { method: "DELETE" });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`–ì—Ä–µ—à–∫–∞: ${errorData.message || "–ù–µ—É—Å–ø–µ—à–Ω–æ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ç–∞."}`);
        }

        alert("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ç–∞ –±–µ—à–µ –∏–∑—Ç—Ä–∏—Ç–∞ —É—Å–ø–µ—à–Ω–æ!");
        await loadHistory();
    } catch (error) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ç–∞:", error);
        alert(error.message);
    }
}
